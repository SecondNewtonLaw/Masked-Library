using Discord;
using Discord.WebSocket;

namespace Masked.Discord.Commands;

public class SlashCommand : ICommand
{
    private readonly SlashCommandBuilder builder = new();
    private string _commandName;

    // Hide Constructor.
    private SlashCommand()
    { }
    public CommandType GetCommandType()
        => CommandType.Slash;
    public string GetCommandName()
        => _commandName;
    public SlashCommandBuilder GetCommandBuilder()
        => builder;

    #region Command Option (ADD)

    public void AddCommandOption(SlashCommandOptionBuilder option)
        => builder.Options.Add(option);
    public void AddCommandOptions(ICollection<SlashCommandOptionBuilder> option)
        => builder.Options.AddRange(option);
    public void AddCommandOptions(IEnumerable<SlashCommandOptionBuilder> option)
        => builder.Options.AddRange(option);

    #endregion Command Option (ADD)

    /// <summary>
    /// Ran when the command is received
    /// </summary>
    /// <param name="commandSocket">The slash command (DNet Implementation) class containing data of the command</param>
    /// <returns></returns>
    public async Task OnCommandReceived(SocketSlashCommand commandSocket)
    {

    }
}